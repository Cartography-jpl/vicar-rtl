# This is stuff common to all our makefiles
#=================================================================
# Based on Peter Millers well known paper "Recursive Make Considered Harmful"
# (at http://miller.emu.id.au/pmiller/books/rmch/), we have the whole system
# described and built with this one Makefile.

#=================================================================
# We specify all the source directories and all of the directories we 
# install to in configure.in. We could just as sensibly defined everything
# here, but we just chose to do it there.

#=================================================================
# Tell automake to put the object file for foo/bar.c in dir foo
# Also, don't include -I. and I$(srcdir). This causes a problem with source that
# includes the C++ file "list", because libtool has a script with the same name

AUTOMAKE_OPTIONS = subdir-objects nostdinc

# Don't worry about Makefile portability warnings. We can assume that we 
# are using GNU make. Pretty much any modern system will have GNU make on it.

AUTOMAKE_OPTIONS += --warnings=no-portability

# Local autoconf packages
ACLOCAL_AMFLAGS = -I config/m4

# no operations command
noop = 

# Build these up as we go
lib_LTLIBRARIES = 
noinst_LTLIBRARIES = 
bin_PROGRAMS =
dist_bin_SCRIPTS = 
AM_LDFLAGS =
BUILT_SOURCES = 
include_HEADERS = 
EXTRA_DIST = 
pkgconfig_DATA =

AM_CPPFLAGS=

#=================================================================
# Some flags needed for GCC compilers.

if HAVE_GCC
AM_CFLAGS = -Wall
# The newer versions of gcc (14 or so) treat what use to be just warnings as
# errors. Turn this off, this code is really old and we just want to compile it,
# not worry about fixing all the old problems
AM_CFLAGS+= -Wno-implicit-function-declaration -Wno-implicit-int
AM_CFLAGS+= -Wno-incompatible-pointer-types
# By default, gfortran ignores characters past column 72. Much of the fortan
# code in this system goes past that column, so tell gfortran to allow this.
AM_FFLAGS+= -ffixed-line-length-none
# Starting with gfortran 10.0 type mismatch changed from a warning to
# an error. Lots of the old code has type mistmatchs in them, for now
# just go back to having the old behavior
#AM_FFLAGS += -fallow-argument-mismatch
# Older versions of the compiler break on this flag. Use -std=legacy instead
AM_FFLAGS += -std=legacy
endif

# hooks for installing. We collect this in one place so automake doesn't
# complain

INSTALL_DATA_HOOK=
install-data-hook: $(INSTALL_DATA_HOOK)

UNINSTALL_HOOK=
uninstall-hook: $(UNINSTALL_HOOK)

CLEAN_HOOK=
clean-local: $(CLEAN_HOOK)

INSTALLCHECK_HOOK=
installcheck-local: $(INSTALLCHECK_HOOK)

TESTS=
check_PROGRAM=
check_DATA=

# ========================================================================
# An error we run into every once in a while is somebody trying to build
# after having doing a setup_afids_env. The problem with this is that
# the AFIDS distribution contains a program "sort" that interfers with the
# unix sort.

# I think we can remove this, now that we have taken vdev out of our path
# in the afids setup. Go ahead and comment this out, in case we need
# to revisit this. But we may be able to just remove this after a time

# complain_if_afids:
# 	@if test -n "${AFIDSTOP}"; then \
#           echo "${red}You have sourced setup_afids_env.sh or setup_afids_env.csh.";  \
#           echo "This will cause the build to *fail*, because MIPL has";  \
#           echo "a program called 'sort' that interferes with the unix";  \
#           echo "sort command. You need to restart the build *without*"; \
#           echo "sourcing setup_afids_env.sh or setup_afids_env.csh${default}"; \
#           exit 1; \
#         fi

# BUILT_SOURCES += complain_if_afids


