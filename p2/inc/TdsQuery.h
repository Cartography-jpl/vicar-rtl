#ifndef TDS_QUERY_OBJECT_H
#define TDS_QUERY_OBJECT_H

//	Copyright (c) 1999, California Institute of Technology
//	U. S. Government sponsorship under NASA contract is acknowledged

//////////////////////////////////////////////////////////////////////////////
//
//				TdsQuery.h
//
//	TdsQuery is a class that prepares and sends a PVL query to a TDS.
//  The query can be an existing PVL file or can be generated by components.
//  Once the query has be created and sent, this is not needed for further
//  TDS interface effort.
//
//////////////////////////////////////////////////////////////////////////////

#include <time.h>
#include "DataSourceSocket.h"
#include "SfduPvl.h"

#define  PVL_BUFFER_LTH		2048

#define  TDS_TIME_UNDEF		-1
#define  TDS_TIME_SCLK		0
#define  TDS_TIME_SCET		1
#define  TDS_TIME_ERT		2
#define  TDS_TIME_RCT		3


class	TdsQuery {

  protected:

	//  Object Components
	int	_connected;
	int     _timeOutLimit;
	char	_pvlBuffer[PVL_BUFFER_LTH];
//	char	_tdsHostName[128];
//	int	_tdsTcpIpPort;
//	char	_pvlFileName[256];
	int	_pvlGenerated;
	SfduPvl	_pvlSfdu;


	//  PVL Components
		// Required
	char    _mission[32];		// global
	char    _spaceCraft[32];	// global
	char    _requester[32];		// global
	char    _description[128];	// global
	int     _timeType;		// global
	time_t  _utcTime[2];		// global
	char    _stringTime[2][32];	// global
	char    _dataType[128];		// frame

		// Optionals
	int     _timeOrder;		// global
	char    _dataFrom[128];		// global
	int	_dssId;			// global
	char    _wseFilter[128];	// frame
	char	_telemetryMode[32];	// frame

	//  Initializes the object's variables
	void	_initialize( void )
		{
//		   memset(_tdsHostName,0,sizeof(_tdsHostName));
//		  _tdsTcpIpPort = 0;
		  memset(_pvlBuffer,0,sizeof(_pvlBuffer));
		  memset(_mission,0,sizeof(_mission));
		  memset(_spaceCraft,0,sizeof(_spaceCraft));
		  strcpy(_requester,"MIPL_RTS");
		  memset(_description,0,sizeof(_description));
		  memset(_utcTime,0,sizeof(_utcTime));
		  strcpy(_stringTime[0],"NOW");
		  strcpy(_stringTime[1],"FOREVER");
		  memset(_dataType,0,sizeof(_dataType));
		  _timeType = TDS_TIME_SCLK;
		  _timeOrder = TDS_TIME_UNDEF;
		  memset(_dataFrom,0,sizeof(_dataFrom));
		  _dssId = -1;
		  memset(_wseFilter,0,sizeof(_wseFilter));
		  memset(_telemetryMode,0,sizeof(_telemetryMode));
		  _connected = 0;
		  _pvlGenerated = 0;

		  return;
		}


  public:
	TdsQuery ( void )
	{ _initialize();
        }

	virtual ~TdsQuery ( void ) { return; }

	int	issueQuery( char *Host, int Port, DataSourceSocket &TdsSource );
		// Sends the PVL query to a TDS and "connects" any
		// plumbing to receive the data on the Data Source.
		//  Checks include:
		//      Verifiing the Data Source is not already connected
		//	PVL buffer is ready to go (from PVL file or components)

	// Transfers the components of a PVL file from disk or SFDU to object
	// and vice-versa
	int	loadPvlFromFile( char *PvlFile );
	int	loadPvlFromSfdu( SfduPvl &Sfdu );
	int	savePvlToFile( char *PvlFile );
	int	generatePvlBuffer( void );

	// PVL component routines
// routine to set all PVL parameters
	void	setMission( char *buffer )
		{ strcpy(_mission,buffer); return; }
	const	char	*mission( void ) { return (_mission); }

	void	setSpaceCraft( char *buffer )
		{ strcpy(_spaceCraft,buffer); return; }
	const	char	*spaceCraft( void ) { return (_spaceCraft); }

	void	setRequester( char *buffer )
		{ strcpy(_requester,buffer); return; }
	const	char	*requestor( void ) { return (_requester); }

	void	setDescription( char *buffer )
		{ strcpy(_description,buffer); return; }
	const	char	*descriptor( void ) { return (_requester); }

	void	setTimeRange( int type, char *start, char *stop );
		// Sets the time range for the query based on string values.
	void	setTimeRange( int type, time_t *start, time_t *stop );
		// Sets the time range for the query based on time_ structures.
	void	timeRange( char *start, char *stop );
	void	timeRange( time_t *start, time_t *stop );

	void	setDataType( char *buffer );
		// White space seperated list of 'data types' to query from
		// TDS; over-writes any previously set values
	void	addDataType( char *buffer );
		// Concatinates additional 'data types' on the end of the
		// existing list
	const	char	*dataType( void ) { return (_dataType); }

	void	setTimeOrder( int value )
		{ _timeOrder = value; return; }
	int	timeOrder( void) { return (_timeOrder); }

	void	setDataFrom( char *buffer )
		{ strcpy(_dataFrom,buffer); return; }
	const	char	*dataFrom( void ) { return (_dataFrom); }

	void	setDssId( int value )
		{ _dssId = value; return; }
	int	dssId( void ) { return (_dssId); }

	void	setWseFilter( char *buffer )
		{ strcpy(_wseFilter,buffer); return; }
	const	char	*wseFilter( void ) { return (_wseFilter); }

	void	setTelemetryMode( char *buffer )
		{ strcpy(_telemetryMode,buffer); return; }
	const	char	*telemetryMode( void ) { return (_telemetryMode); }
};

#endif
