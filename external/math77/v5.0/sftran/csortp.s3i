      subroutine CSORTP (C, M, N, K, L, P)
noindent
C     .  Copyright (C) 1989, California Institute of Technology.
C     .  All rights reserved.  U. S. Government sponsorship under
C     .  NASA contract NAS7-918 is acknowledged.
C>> 1994-11-14  CSORTP  Krogh   Declared all vars.
c>> 1992-11-23  CSORTP  Snyder  Add entry CSORTQ.
C>> 1991-04-02  CSORTP  Snyder  Repair no permutation vector if m-n < 10
c>> 1988-11-22  CSORTP  Snyder  Initial code.
c
c     Sort the M:N-vector of character strings C according to the (K:L)
c     substring of each element.  C is not disturbed.  P is set
c     so that C(P(J)) is the J'th element of the sorted sequence.
c     Enter at CSORTQ to use pre-specified permutation vector.
c
      integer M, N, K, L
      character*(*) C(*)
      integer P(*)
c
c     *****     Local Variables     ************************************
c
c BL      is the left bound of the sub-array to be sorted at the next
c         step.
c BR      is the right bound of the sub array to be sorted at the next
c         step.
c CL      is the current left bound of the unsorted sub-array.
c CR      is the current right bound of the unsorted sub-array.
c PARTN   is the partition element.
c PTEMP   holds elements of P during exchanges.
c STACKL  keeps track of the left bounds of sub-arrays waiting to be
c         sorted.
c STACKR  keeps track of the right bounds of sub-arrays waiting to be
c         sorted.
c STKTOP  keeps track of the top of the stacks.
c
      integer BL,BR,CL,CR,PARTN,PTEMP
      integer STACKL(32),STACKR(32),STKTOP
indent
c
c     *****     Executable Statements     ******************************
c
      do for cl = m, n
         p(cl)=cl
      end for
      entry CSORTQ (C, M, N, K, L, P)
      if (n-m.ge.10) then
         stktop=1
         stackl(1)=m
         stackr(1)=n
         do until (stktop.eq.0)
            bl=stackl(stktop)
            br=stackr(stktop)
            stktop=stktop-1
            partn=p(bl)
c           Choose a partitioning element.  Use the median of the first,
c           middle and last elements.  Sort them so the extreme elements
c           can serve as sentinels during partitioning.
            cl=(bl+br)/2
            ptemp=p(cl)
            if (c(p(bl))(k:l).gt.c(ptemp)(k:l)) then
               p(cl)=p(bl)
               p(bl)=ptemp
               ptemp=p(cl)
            end if
            if (c(p(bl))(k:l).gt.c(p(br))(k:l)) then
               cr=p(bl)
               p(bl)=p(br)
               p(br)=cr
            end if
            if (c(ptemp)(k:l).gt.c(p(br))(k:l)) then
               p(cl)=p(br)
               p(br)=ptemp
               ptemp=p(cl)
            end if
            p(cl)=p(br-1)
            p(br-1)=ptemp
            partn=p(cl)
c           Partition the sub-array around PARTN.  Exclude the above
c           considered elements from partitioning because they're al-
c           ready in the correct subfiles.  Stop scanning on equality to
c           prevent files containing equal values from causing a loop.
            cl=bl
            cr=br-1
            do forever
               do until (c(p(cl))(k:l).ge.c(partn)(k:l))
                  cl=cl+1
               end until
               do until (c(p(cr))(k:l).le.c(partn)(k:l))
                  cr=cr-1
               end until
               if (cl.gt.cr) exit forever
               ptemp=p(cl)
               p(cl)=p(cr)
               p(cr)=ptemp
            end forever
c           Put sub-arrays on the stack if they're big enough.  Put the
c           larger under the smaller, so the smaller will be done next.
c           This makes the upper bound of the stack depth log2 (n-m+1).
c           (The "Hibbard" modification of quicksort).
            if (cl-bl .gt. br-cr) then
               if (cl-bl.gt.10) then
                  stktop=stktop+1
                  stackl(stktop)=bl
                  stackr(stktop)=cr
               end if
               if (br-cr.gt.10) then
                  stktop=stktop+1
                  stackl(stktop)=cl
                  stackr(stktop)=br
               end if
            else
               if (br-cr.gt.10) then
                  stktop=stktop+1
                  stackl(stktop)=cl
                  stackr(stktop)=br
               end if
               if (cl-bl.gt.10) then
                  stktop=stktop+1
                  stackl(stktop)=bl
                  stackr(stktop)=cr
               end if
            end if
         end until
      end if
c     Clean up small subfiles using insertion sort on everything.
      do for cr = m+1, n
         ptemp=p(cr)
         cl=cr
         do while (c(p(cl-1))(k:l).gt.c(ptemp)(k:l))
            p(cl)=p(cl-1)
            cl=cl-1
            if (cl.le.m) exit while
         end while
         p(cl)=ptemp
      end for
c
      return
c
      end program
