      SUBROUTINE DBESYN(X, ALPHA, NUM, BY)
inline(!)
noindent
C     .  Copyright (C) 1989, California Institute of Technology.
C     .  U. S. Government sponsorship under
C     .  NASA contract NAS7-918 is acknowledged.
C>> 1994-10-19 DBESYN Krogh  Changes to use M77CON
C>> 1994-04-19 DBESYN CLL  Edited to make DP & SP files similar.
C>> 1991-01-14 DBESYN CLL  Removed duplicate data statement.
C>> 1989-08-09 DBESYN CLL  More accurate constants for Cray
C>> 1986-03-18 DBESYN Lawson  Initial code.
c--D replaces "?": ?BESYN, ?BESPQ, ?ERV1, ?GAMMA, ?LGAMA
C
c     This subr computes the Y Bessel functions of X for
c     NUM orders from ALPHA through ALPHA + NUM - 1.
c     The results will be stored in BY(I), I = 1,...,NUM.
C
c     Require X .gt. 0.,    ALPHA .ge. 0.,    NUM .ge. 1.
C
c          The original subroutines SBYNU and BESJ/BESY were
c     designed and programmed by E. W. Ng and W. V. Snyder, JPL,
C     in 1973.  Modified by Ng and S. Singletary, JPL, 1974.
c
c     1984 April 16, JPL, C. Lawson and S. Chan.  Original subrs
c     combined into single subroutine.  Converted to SFTRAN3
c     and Fortran 77 for the JPL MATH77 library.
C
c     ------------------------------------------------------------------
c
c           As the machine precision, EPS, increases so does XPQ,
c     and thus so does the requirement for the storage dimension,
c     LDIMA.  Here are some values of -LOG10(EPS), XPQ, and LDIMA.
c
c     -LOG10(EPS)=  5     10     15     20     25     30
c            XPQ =  5.74  11.38  17.03  22.68  28.32  33.97
c          LDIMA = 17     33     49     63     79     95
c
c           Since LDIMA cannot be adjusted at run-time, we are
c     setting it to 95 to handle the case of CDC double precision
c     which is probably the largest precision system likely
c     to be encountered.  Note that the relative precision of results
c     from this subr cannot exceed about 16 or 17 decimal places
c     because of the limited accuracy of the polynomial coeffs used to
c     compute G0, and also the limited precision of the
c     subprograms referenced for gamma and loggamma.
c     ------------------------------------------------------------------
c     Subprograms used: TANH, LOG10, LOG, EXP, COS, SIN, SQRT
      EXTERNAL          D1MACH, DBESPQ, DERV1, ERMSG, ERMOR, IERV1
      EXTERNAL          DGAMMA, DLGAMA
c     ----------
      integer I, II, K, LDIMA, M, MU, MUSAVE, N20023, N20093, ND2
      integer NMAX, NMIN, NPR001, NPR008, NUM
      parameter( LDIMA = 95, ND2 = 10)
      double precision D1MACH, DGAMMA, DLGAMA
      double precision AJ(LDIMA), ALPHA, ARG
      double precision BGAM, BGAMSQ, BIG, BIGLOG, BY(NUM)
      double precision C11293, C16, C1P5, C2BYPI, C59, CHI, CP6, CUTLOW
      double precision D1, D2, D2SER(0:ND2), D2VAL, D3, DR
      double precision EC, EM, EM1, EMU, EN1, EN2, EN3, EPS, ETA
      double precision FAC, FK, FKM1, FKP1, FOUR, FV, FVM1, FVP1
      double precision G, G0, G1, GMAX, GNU, HALF, HALFPI, HICUT
      double precision LOGPI, LOGTWO, ONE, P, PI, PIV2, PSI1, PSIZ
      double precision Q, Q2DXPV, SCALE, SMALL, SUM
      double precision TEMP, TEST, THREE, THSJ, THVDX, TWO, TWODX
      double precision V, V2, VPMU, X, XLOG, XPQ
      double precision YLOG, YV, YVM1, YVP1, Z, ZERO
      logical FLAG, J1SMAL
      save EPS, HICUT, SMALL, XPQ, BIG, BIGLOG
c
      parameter( ZERO = 0.D0, ONE = 1.D0, TWO = 2.D0)
      parameter( HALF = 0.5D0, THREE = 3.0D0)
      parameter( C16 = 16.D0, FOUR = 4.0D0)
      parameter(PI = 3.14159 26535 89793 23846 26433 83279 50288D0)
C
      parameter(HALFPI = 1.57079 63267 94896 61923 13216 91639 75144D0)
c          LOGPI = ln(pi)
      parameter(LOGPI = 1.14472 98858 49400 17414 34273 51353 05869D0)
c          C2BYPI = 2/pi
      parameter(C2BYPI = 0.63661 97723 67581 34307 55350 53490 05744D0)
c          EC = Euler's constant.
      parameter(EC = 0.57721 56649 01532 86060 65120 90082 40243 D0)
c          LOGTWO = Ln(2)
      parameter(LOGTWO = 0.69314 71805 59945 30941 72321 21458 17657D0)
      parameter(   C1P5 = 1.5D0 )
      parameter( C11293 = 1.1293D0)
      parameter(    CP6 = 0.60206D0)
      parameter(    C59 = 0.59D0)
      parameter( CUTLOW = 0.012D0)
      parameter(   THSJ = 0.12D0)
      DATA EPS / ZERO /
C
      DATA D2SER( 0) / +.36746 69051 96615 96151 85D+00/
      DATA D2SER( 1) / -.17829 03980 80726 98422 31D+01/
      DATA D2SER( 2) / +.94116 44685 12285 59084 27D+00/
      DATA D2SER( 3) / -.19588 65250 24874 78780 77D+01/
      DATA D2SER( 4) / +.15573 06621 10828 32944 75D+01/
      DATA D2SER( 5) / -.25210 51413 54681 20964 37D+01/
      DATA D2SER( 6) / +.21845 02685 63511 09141 45D+01/
      DATA D2SER( 7) / -.31400 67153 45267 44028 72D+01/
      DATA D2SER( 8) / +.28174 01038 92146 13611 58D+01/
      DATA D2SER( 9) / -.37721 98775 79967 00818 58D+01/
      DATA D2SER(10) / +.34527 80604 49258 45750 60D+01/
C
c     ------------------------------------------------------------------
indent
C
c     Set environmental parameters.
c
      IF( EPS .EQ. ZERO) THEN
         EPS = D1MACH(3)
         HICUT = ONE / (EPS*C16)
         SMALL = C16 * D1MACH(1) / EPS
         XPQ = C11293 * (CP6 - LOG10( EPS )) - C59
         BIG = D1MACH(2) / TWO
         BIGLOG = LOG(BIG)
      END IF !( EPS .EQ. ZERO )
c     ------------------------------------------------------------------
c
c     Compute V, NMIN, and NMAX.
c
      NMIN = INT(ALPHA)
      V = ALPHA - DBLE(NMIN)
      NMAX = NMIN + NUM -1
c     ------------------------------------------------------------------
c
c     Test validity of given argument values.
C
      IF( X .LT. ZERO  .OR.
     *   ALPHA .LT. ZERO .OR. NUM .LT. 1) THEN
C$                                               Error 1.
        CALL ERMSG('DBESYN',1,0,
     *             'Require X .gt. 0, ALPHA .ge. 0, NUM .ge. 1',',')
         DO(TRANSMIT X, ALPHA, AND NUM)
        RETURN
      END IF
c
c     ------------------------------------------------------------------
C
c     Branch on size of X.
c
      IF( X .EQ. ZERO ) THEN
c     >                                           Error 6.
         DO FOR I = 1, NUM
            BY(I) = -BIG
         END FOR ! I
         CALL ERMSG('DBESYN',6,0,
     *   'When X = 0., function value is -INFINITY.', ',')
         DO( TRANSMIT X, ALPHA , AND NUM )
      ELSE IF( X .LT. EPS ) THEN
         DO( VERY SMALL X )
      ELSE
         TWODX = TWO / X
         IF( X .LE. XPQ ) THEN
            DO( COMPUTE J BY RECURSION )
            DO( COMPUTE Y FROM J )
         ELSE IF( X .LE. HICUT ) THEN
            DO( LARGE X )
         ELSE
c        >                                             Error 2.
            CALL ERMSG('DBESYN', 2, 0,
     *      'Cannot obtain any accuracy when X exceeds HICUT.', ',')
            CALL DERV1('HICUT', HICUT, ',')
            DO(TRANSMIT X, ALPHA, AND NUM)
         END IF !(X...)
      END IF !(X .EQ. ZERO)
C
      RETURN
c     ------------------------------------------------------------------
c
      PROCEDURE( VERY SMALL X )
c
c     >     Use a single term expression for Y, valid
c     for X very close to zero.  Ref NBS AMS 55 Eqs 9.1.8 & 9.1.9.
c     For GNU = 0,   Y = (2/pi) * (EC + Ln(X/2)),  {EC = Euler's const.}
c     For GNU .gt. 0    Y =  -(1/pi) * Gamma(GNU) * (X/2)**(-GNU)
c
      XLOG = LOG( X )
      GNU = ALPHA
c
      DO FOR I = 1, NUM
         IF( GNU .EQ. ZERO ) THEN
            BY(I) = C2BYPI * (EC + XLOG - LOGTWO)
         ELSE
            YLOG = DLGAMA(GNU) - GNU * (XLOG-LOGTWO) - LOGPI
            IF(YLOG .LT. BIGLOG) THEN
               BY(I) = -EXP(YLOG)
            ELSE
c     >                                         Error 5.
               DO FOR II = I,NUM
                  BY(II) = -BIG
               END FOR ! II
               CALL ERMSG('DBESYN',5,0,
     *         'Results exceed overflow limit from BY(I) on.', ',')
               CALL IERV1('I', I, ',')
               DO(TRANSMIT X, ALPHA, AND NUM)
               EXIT FOR
            END IF !(YLOG...)
         END IF !( GNU...)
            GNU = GNU + ONE
      END FOR ! I
      END PROC !( VERY SMALL X )
c     ------------------------------------------------------------------
C
      PROCEDURE( COMPUTE J BY RECURSION )
C
C     J-TYPE BESSEL FUNCTIONS FOLLOW THE RECURRENCE RELATION
C     F(V-1,X)=(2*V/X)*F(V,X)-F(V+1,X).
C
      MU = INT(X) + 1
      DR = TWODX * (V+DBLE(MU))
      FKP1 = ONE
      FK =  ZERO
C
C     RECUR FORWARD UNTIL FKP1 IS GREATER THAN PRECISION OF ARITHMETIC.
C
      DO WHILE( EPS * ABS(FKP1) .LE. ONE )
      MU = MU + 1
      DR = DR + TWODX
      FKM1 = FK
      FK = FKP1
      FKP1 = DR * FK - FKM1
      END WHILE !(EPS...)
C
C     WE ARE NOW ASSURED THAT BACKWARD RECURRENCE FROM MU WILL YIELD
C     ACCURATE RESULTS.
C
C                                        GUARANTEE EVEN MU
      IF (MOD(MU,2) .NE. 0)  MU = MU + 1
      MUSAVE = MU
c
c     >                                         Test for Error 3.
c
c     This error should never happen.  Large MU would be due to
c     large X.  But X is not larger than XPQ here.
c     See explanation at the beginning of this subroutine
c     of the relation of XPQ and LDIMA to the machine EPS.
c
      IF( MU + 1 .GT. LDIMA) THEN
         CALL ERMSG('DBESYN', 3, 0,
     *'Need larger dimension, LDIMA, to process given X.', ',')
         CALL ERMOR('Require LDIMA .ge. MU + 1', ',')
         CALL IERV1('MU', MU, ',')
         CALL IERV1('LDIMA', LDIMA, ',')
         DO( TRANSMIT X, ALPHA, AND NUM )
c$                                               Error RETURN.
         RETURN
      END IF !(MU + 1...)
c
      FVM1 = SMALL
      AJ(MU+1) = FVM1
      FV = ZERO
      ETA = ONE
      SUM = FVM1
      M = MU / 2
      EM = DBLE(M)
      EMU = DBLE(MU)
      FAC = (V + EMU) * TWODX
C
c     Set TEST = largest value that can be multiplied by
c     FAC without risking overflow.  The present value of
c     FAC is the largest that will occur during the recursion.
c     TEST will be used to protect against overflow during
c     the recursion.
c
      TEST = BIG / MAX(ONE, FAC)
C
C$                            Loop while MU .GT. ZERO
C
      DO FOREVER
      FVP1 = FV
      FV = FVM1
      IF( ABS(FV) .GT. TEST ) DO( RESCALE )
      FVM1 = FAC * FV - FVP1
      MU = MU -1
      EMU = EMU - ONE
      FAC = (V + EMU) * TWODX
         AJ(MU+1) = FVM1
      IF (MOD(MU,2) .EQ. 0) THEN
        IF (V .EQ. ZERO)  THEN
          SUM = SUM + FVM1
          IF (MU .EQ. 0) THEN
            SCALE = ONE / SUM
            EXIT FOREVER
          END IF
          SUM = SUM + FVM1
        ELSE
          IF (MU .NE. 0) THEN
            VPMU = V + EMU
            ETA = ETA * (EM/(V + (EM-ONE))) * (VPMU / (VPMU + TWO))
            SUM = SUM + FVM1 * ETA
            EM = EM - ONE
          ELSE
c
c           Here MU = 0 and EM = 0NE.  Thus the expression for
c           updating ETA reduces to the following simpler
c           expression.
c
            ETA = ETA / (V + TWO)
            SUM = SUM + FVM1 * ETA
            BGAM = DGAMMA(V+ONE)
            Q2DXPV = TWODX ** V
            SCALE = ( BGAM / ETA ) * SUM * Q2DXPV
            SCALE = ONE / SCALE
            EXIT FOREVER
          END IF !(MU .NE. 0)
        END IF !(V .EQ. ZERO)
      END IF !(MOD(MU,2)...)
      END FOREVER
C
C     NORMALIZE AJ() TO GET VALUES OF J-BESSEL FUNCTION.
C
      DO FOR I = 1, MUSAVE+1
         AJ(I) = AJ(I) * SCALE
      END FOR ! I
      MU = MUSAVE
      END PROC !( COMPUTE J BY RECURSION )
C
C     ------------------------------------------------------------------
C
      PROCEDURE( RESCALE )
C
      FV = FV / SUM
      FVP1 = FVP1 / SUM
      DO FOR II = MU+1, MUSAVE
         AJ(II) = AJ(II) / SUM
      END FOR ! II
      SUM = ONE
      END PROC !( RESCALE )
C
c     ------------------------------------------------------------------
c
      PROCEDURE( COMPUTE Y FROM J )
c
c$         This proc computes Y Bessel functions, making use
c     of previously computed J Bessel functions and other
c     previously computed values, MU, BGAM, Q2DXPV, TWODX, V.
c
c     >     Here V is in the range [0.,1.).  The
c     quantities G0 and G1 depend on X and V and are unbounded
c     as V approaches 1.   Therefore we make
c     the change of variables
c     >          V2 = V      if V .le. 0.5 and
c     >          V2 = 1 - V  if V .gt. 0.5
c     Then G0 and G1 are computed as functions of X and V2
c     with V2 in the range (-0.5, 0.5].
C
c     Compute G0 and G1.
c
      BGAMSQ = BGAM**2
      V2 = V
      IF( V .EQ. ZERO ) THEN
         Z = EC - LOG(TWODX)
         G0 =  Z / HALFPI
         G1 = TWO / HALFPI
         BGAMSQ = ONE
         Q2DXPV = ONE
      ELSE
         IF(V .GT. HALF) THEN
c
c           Use the transformed variable, V2 = V - 1.
c           Make corresponding transformation of Q2DXPV & BGAMSQ.
c
            V2 = (V - HALF) - HALF
            Q2DXPV = Q2DXPV / TWODX
            BGAMSQ = BGAMSQ / V**2
         END IF !(V .GT. HALF)
         PIV2 = PI * V2
c
c           Here V2 is in [-.5, .5].  Now test against CUTLOW = 0.012
c
         IF( ABS(V2) .LT. CUTLOW ) THEN
            DO(COMPUTE G0 AND G1 FOR VERY SMALL V2)
         ELSE
            G0 = (ONE / TAN(PIV2)) - Q2DXPV**2 * BGAMSQ / PIV2
            G1 = (Q2DXPV**2/HALFPI) * BGAMSQ * (TWO+V2) / (ONE-V2)
         END IF !( ABS(V2) .LT. CUTLOW )
      END IF !( V...)
c ----------------------------------
c
C     COMPUTE YO FROM SUM(J'S) FORM
c
      EN3 = V2 + ONE
      EN2 = V2 + EN3
      EN1 = V2 + FOUR
      D1 = TWO
      D2 = D1 - V2
      D3 = D1 + V2
      FLAG = .FALSE.
c$                                     THSJ = 0.12
      J1SMAL = ABS(AJ(1)) .LT. THSJ
      IF( J1SMAL  .OR. V2 .LT. ZERO) THEN
         FLAG = .TRUE.
C
C        Y(V2+1,X) MUST ALSO BE COMPUTED BY A SUM
C
         THVDX = THREE * V2 / X
         PSIZ = -BGAMSQ * Q2DXPV**2 / (HALFPI*X)
         PSI1 = G0 - HALF * G1
      END IF !(J1SMAL...)
c
      IF (V2 .GE. ZERO) THEN
         M = 3
         YV = G0 * AJ(1)
         IF( J1SMAL ) THEN
            YVP1 = PSIZ * AJ(1) + PSI1 * AJ(2)
         END IF !( J1SMAL )
      ELSE
         Z = TWODX * V * AJ(1)-AJ(2)
         YV = G0 * Z
         M = 2
         YVP1 = PSIZ * Z + PSI1 * AJ(1)
      END IF !(V2 .GE. ZERO)
c
      DO FOR I = M,MU,2
         YV = G1 * AJ(I) + YV
         G = G1
         G1 = -G1 * (EN1/D1) * (EN2/D2) * (EN3/D3)
         EN1 = EN1 + TWO
         EN2 = EN2 + ONE
         EN3 = EN3 + ONE
         D1 = D1 + ONE
         D2 = ONE + D2
         D3 = D3 + TWO
         IF( FLAG ) THEN
            YVP1 = YVP1 + THVDX*G*AJ(I) + HALF*(G-G1)*AJ(I+1)
         END IF !( FLAG )
      END FOR ! I
c
      IF (V2 .LT. ZERO) THEN
         Z = YVP1
         YVP1 = V * Z * TWODX - YV
         YV = Z
      ELSE IF ( .NOT. J1SMAL ) THEN
C
C           NOW COMPUTE Y(V+1)
C           WRONSKIAN PROVIDED NOT NEAR A ZERO OF J
C
            YVP1 = (YV*AJ(2)-ONE/(X*HALFPI)) / AJ(1)
      END IF !(V2 .LT. ZERO,  .NOT. J1SMAL)
c
      DO( FORWARD RECURSION )
      END PROC !( COMPUTE Y FROM J )
C
c     ------------------------------------------------------------------
C
      PROCEDURE(COMPUTE G0 AND G1 FOR VERY SMALL V2)
C
c     Here we compute
c           G0 = (ONE / TAN(PIV2)) - Q2DXPV**2 * BGAMSQ / PIV2
c     by a formulation that retains accuracy for
c     V2 close to zero.
c     >     The no. of coeffs from D2SER() used to compute D2VAL
c     could be fewer on lower precision computers, however this
c     computation is only done about 2.4% of the time so the
c     potential time saving would probably not be noticeable.
c
c     This method was derived by C. Lawson and W. V. Snyder,
c     JPL, 1984 Apr 15.
c
c     First compute EM1 = (2/X)**(2*V2) - 1
c                       = exp(2 * V2 * log(2/X)) - 1
c
      ARG = TWO * V2 * LOG( TWODX )
      IF( ABS( ARG ) .LT. LOGTWO ) THEN
         TEMP = TANH( HALF * ARG )
         EM1 = TWO * TEMP / (ONE - TEMP)
      ELSE
         EM1 = EXP( ARG ) - ONE
      END IF !( ABS(ARG)...)
c
c      Evaluate taylor series for
c      D2VAL = (PIV2 * cotan(PIV2) - BGAMSQ) / PIV2
c
      D2VAL = D2SER(ND2)
      DO FOR I = ND2-1, 0, -1
         D2VAL = D2SER(I) + V2 * D2VAL
      END FOR ! I
c
         G0 = D2VAL - BGAMSQ * (EM1 / PIV2)
         G1 = (Q2DXPV**2/HALFPI) * BGAMSQ * (TWO+V2) / (ONE-V2)
      END PROC !(COMPUTE G0 AND G1 FOR VERY SMALL V2)
C
c     ------------------------------------------------------------------
C
      PROCEDURE( LARGE X )
C
c     >     Here we have X .ge. XPQ, and V in [0.,1.).
c     The asymptotic series for
c     the auxiliary functions P and Q can be used.
c     From these we will compute Y(V,X) and Y(V+1,X) and
c     then recur forward.
c     Reference: NBS AMS 55 Eqs 9.2.5 & 9.2.6
c
      CALL DBESPQ (X,V,  P,Q)
      CHI = X - (V + HALF) * HALFPI
      YV = SQRT(ONE / (HALFPI*X)) * (P*SIN(CHI) + Q*COS(CHI))
C
      IF( NMAX .GT. 0 ) THEN
         CALL DBESPQ (X,V+ONE,   P,Q)
         CHI = X - (V + C1P5) * HALFPI
         YVP1 = SQRT(ONE / (HALFPI*X)) * (P*SIN(CHI) + Q*COS(CHI))
      END IF !(NMAX .GT. 0)
c
      DO( FORWARD RECURSION )
      END PROC !( LARGE X )
C     ------------------------------------------------------------------
c
      PROCEDURE( FORWARD RECURSION )
c
c     >     Given YV = Y(V,X), YVP1 = Y(V+1,X), TWODX = 2/X,
c     NMIN, NUM, NMAX = NMIN + NUM -1,
c     X, ALPHA, and BIG.
c     Recur forward and store Y(NMIN+V) thru Y(NMAX+V) in
c     BY(1) thru BY(NUM).
c
      IF( NMIN .EQ. 0 ) THEN
         BY(1) = YV
         IF( NMAX .GT. 0 ) THEN
            BY(2) = YVP1
         END IF !(NMAX .GT. 0)
      ELSE IF( NMIN .EQ. 1 ) THEN
         BY(1) = YVP1
      END IF !( NMIN...)
c
      IF( NMAX .GT. 1 ) THEN
         G = V * TWODX
         GMAX = G + TWODX * DBLE(NMAX-1)
         TEST = BIG / MAX(ONE, GMAX)
c
c        Note:  In the following statement, 3-NMIN can be nonpositive.
c
         DO FOR K = 3-NMIN, NUM
            YVM1 = YV
            YV   = YVP1
            IF(ABS(YV) .GT. TEST) THEN
c
c              The recursion has reached the overflow limit.
c              Set remaining elts of BY() to a large negative value
c              and issue error message.
c
               DO FOR II = MAX(K, 1),NUM
                  BY(II) = -BIG
               END FOR ! II
C$                                                  Error 4.
               CALL ERMSG('DBESYN',4,0,
     *         'Results exceed overflow limit from BY(I) on.', ',')
               CALL IERV1('I', MAX(K,1), ',')
               DO(TRANSMIT X, ALPHA, AND NUM)
               EXIT PROCEDURE
            END IF !(BY(I)...)
c
            G = G + TWODX
            YVP1 = G * YV - YVM1
            IF( K .GE. 1)  BY(K) = YVP1
         END FOR ! I
      END IF !( NMAX .GT. 1)
      END PROC !( FORWARD RECURSION )
C     ------------------------------------------------------------------
C
      PROCEDURE( TRANSMIT X, ALPHA, AND NUM )
C
        CALL DERV1('X',X,',')
        CALL DERV1('ALPHA',ALPHA,',')
        CALL IERV1('NUM',NUM,'.')
      END PROC !( TRANSMIT X, ALPHA, AND NUM )
C     ------------------------------------------------------------------
      END PROGRAM
